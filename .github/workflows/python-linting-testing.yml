on:
    push:
      branches: [ main ]
      paths:
        'python/**'
    pull_request:
      branches: [ main ]
      paths:
        'python/**'
jobs:
    build:
        runs-on: ubuntu-latest
        
        strategy:
            matrix:
                # Optional pass other python versions "3.7", "3.8", "3.9" 
                python-version: [ "3.10","3.11"]
        steps:
            - uses: actions/checkout@v3
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                python-version: ${{matrix.python-version}}

            - name: Install dependencies
              working-directory: '../../python'
              run: |
                python -m pip install --upgrade pip
                # pip install flake8 pytest pytest-cov
                pip install -r ./python/src/requirements.txt
                
            - name: Lint with flake8
              working-directory: '../../python'
              run: |
                  # stop the build if there are Python syntax errors or undefined names
                  flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                  # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                  flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
           
            # - name: Test with pytest
            #   run: |
            #     pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml

            # - name: Upload pytest test results
            #   uses: actions/upload-artifact@v3
            #   with:
            #       name: pytest-results-${{ matrix.python-version }}
            #       path: junit/test-results-${{ matrix.python-version }}.xml
            #     # Use always() to always run this step to publish test results when there are test failures
            #   if: ${{ always() }}
            - name: Run tests and collect coverage
              working-directory: '../../python'
              run: |
                pytest --cov=dev-ops-starter --cov-report=xml

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v3
              with:
                token: ${{ secrets.CODECOV_TOKEN }}